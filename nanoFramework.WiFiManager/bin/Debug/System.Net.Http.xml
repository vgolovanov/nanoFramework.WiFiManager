<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Net.Http</name>
    </assembly>
    <members>
        <member name="T:System.Net.AuthenticationType">
            <summary>
            Network authentication type.
            Currently supports:
            Basic Authentication
            Microsoft Live Id Delegate Authentication
            </summary>
        </member>
        <member name="F:System.Net.AuthenticationType.Basic">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Net.AuthenticationType.WindowsLive">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Net.HttpConstants.DefaultKeepAliveMilliseconds">
            <summary>
            Default time (ms) to keep a persistent connection open
            </summary>
        </member>
        <member name="F:System.Net.HttpConstants.maxHTTPLineLength">
            <summary>
             maximum length of the line in reponse line 
            </summary>
        </member>
        <member name="T:System.Net.HttpListener">
            <summary>
            Provides a simple, programmatically controlled HTTP protocol listener.
            This class cannot be inherited.
            </summary>
            <remarks>
            This class enables using a socket to receive data that uses the HTTP
            protocol.
            </remarks>
        </member>
        <member name="F:System.Net.HttpListener.m_IsHttpsConnection">
            <summary>
            Indicates whether the listener is waiting on an http or https
            connection.
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.m_httpsCert">
            <summary>
            The certificate to send during https authentication.
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.MaxCountOfPendingConnections">
            <summary>
            This value is the number of connections that can be ready but are
            not retrieved through the Accept call.
            </summary>
            <remarks>
            This value is passed to the <b>Listen</b> method of the socket.
            </remarks>
        </member>
        <member name="F:System.Net.HttpListener.m_listener">
            <summary>
            Server socket for incoming connections.
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.m_maxResponseHeadersLen">
            <summary>
            The MAXIMUM length, in kilobytes (1024 bytes), of the request
            headers.
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.m_RequestArrived">
            <summary>
            Event that indicates arrival of new event from client.
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.m_InputStreamsQueue">
            <summary>
            The queue of connected networks streams with pending client data.
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.m_Port">
            <summary>
            Port number for the server socket.
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.m_ServiceRunning">
            <summary>
            Indicates whether the listener is started and is currently accepting
            connections.
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.m_Closed">
            <summary>
            Indicates whether the listener has been closed
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.m_ClientStreams">
            <summary>
            Array of connected client sockets.
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.m_thAccept">
            <summary>
            Http Thread for accepting new connections.
            </summary>
        </member>
        <member name="F:System.Net.HttpListener.m_sslProtocols">
            <summary>
            SslProtocol which shall be used.
            </summary>
        </member>
        <member name="P:System.Net.HttpListener.SslProtocols">
            <summary>
            Gets or sets the TLS/SSL protocol used by the <see cref="T:System.Net.HttpListener"/> class.
            </summary>
            <value>
            One of the values defined in the <see cref="T:System.Net.Security.SslProtocols"/> enumeration.
            </value>
            <remarks>
            This property is specific to nanoFramework. There is no equivalent in the .NET API.
            </remarks>
        </member>
        <member name="M:System.Net.HttpListener.#ctor(System.String)">
            <summary>
            Creates an HTTP or HTTPS listener on the standard ports.
            </summary>
            <param name="prefix">Prefix ( http or https ) to start listen</param>
            <remarks>In the desktop version of .NET, the constructor for this
            class has no arguments.</remarks>
        </member>
        <member name="M:System.Net.HttpListener.#ctor(System.String,System.Int32)">
            <summary>
            Creates an HTTP or HTTPS listener on the specified port.
            </summary>
            <param name="prefix">The prefix for the service, either "http" or
            "https".</param>
            <param name="port">The port to start listening on.  If -1, the
            default port is used (port 80 for http, or port 443 for https).
            </param>
            <remarks>In the desktop version of .NET, the constructor for this
            class has no arguments.</remarks>
        </member>
        <member name="M:System.Net.HttpListener.InitListener(System.String,System.Int32)">
            <summary>
            Initializes the listener.
            </summary>
            <param name="prefix">The prefix for the service, either "http" or
            "https".</param>
            <param name="port">The port to start listening on.  If -1, the
            default port is used (port 80 for http, or port 443 for https).
            </param>
        </member>
        <member name="M:System.Net.HttpListener.AddClientStream(System.Net.OutputNetworkStreamWrapper)">
            <summary>
            Adds a new output stream to the list of connected streams.
            </summary>
            <remarks>This is an internal function, not visible to the user.
            </remarks>
            <param name="clientStream">The stream to add.</param>
        </member>
        <member name="M:System.Net.HttpListener.RemoveClientStream(System.Net.OutputNetworkStreamWrapper)">
            <summary>
            Removes the specified output stream from the list of connected
            streams.
            </summary>
            <param name="clientStream">The stream to remove.</param>
        </member>
        <member name="T:System.Net.HttpListener.HttpListernerAndStream">
            <summary>
            Packages together an HttpListener and a socket.
            </summary>
            <remarks>This class is used to package together an HttpListener and a socket.
            We need to start new thread and pass 2 parameters - instance of listener and socket.
            For that purpose we create class that keeps references to both listerner and socket and
            start thread using member function of this class as delegate.
            Internal class not visible to user.</remarks>
        </member>
        <member name="M:System.Net.HttpListener.WaitingConnectionThreadFunc(System.Net.OutputNetworkStreamWrapper)">
            <summary>
            Waits for new data from the client.
            </summary>
        </member>
        <member name="M:System.Net.HttpListener.Abort">
            <summary>
            Shuts down the <itemref>HttpListener</itemref> object immediately,
            discarding all currently queued requests.
            </summary>
            <remarks>This method disposes of all resources held by this
            listener.  Any pending requests are unable to complete.  To shut
            down the <itemref>HttpListener</itemref> object after processing
            currently queued requests, use the
            <see cref='M:System.Net.HttpListener.Close'/> method.
            <para>
            After calling this method, you will receive an
            <see cref='T:System.ObjectDisposedException'/> if you attempt to use this
            <itemref>HttpListener</itemref>.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.HttpListener.AcceptThreadFunc">
            <summary>
            Waits for new connections from the client.
            </summary>
            <remarks>On new connections, this method enques the new input
            network stream and sets an event that a new connection is available.
            </remarks>
        </member>
        <member name="M:System.Net.HttpListener.Start">
            <summary>
            Allows this instance to receive incoming requests.
            </summary>
            <remarks>This method must be called before you call the
            <see cref="M:System.Net.HttpListener.GetContext"/> method.   If
            the service was already started, the call has no effect.  After you
            have started an <itemref>HttpListener</itemref> object, you can use
            the <see cref='M:System.Net.HttpListener.Stop'/> method to stop it.
            </remarks>
        </member>
        <member name="M:System.Net.HttpListener.Close">
            <summary>
            Shuts down the <itemref>HttpListener</itemref> after processing all
            currently queued requests.
            </summary>
            <remarks>After calling this method, you can no longer use the
            <itemref>HttpListener</itemref> object.  To temporarily pause an
            <itemref>HttpListener</itemref> object, use the
            <see cref='M:System.Net.HttpListener.Stop'/> method.</remarks>
        </member>
        <member name="M:System.Net.HttpListener.Stop">
            <summary>
            Causes this instance to stop receiving incoming requests.
            </summary>
            <remarks>If this instance is already stopped, calling this method
            has no effect.
            <para>
            After you have stopped an <itemref>HttpListener</itemref> object,
            you can use the <see cref='M:System.Net.HttpListener.Start'/> method
            to restart it.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.HttpListener.GetContext">
            <summary>
            Waits for an incoming request and returns when one is received.
            </summary>
            <returns>
            An <see cref="T:System.Net.HttpListenerContext"/> object that
            represents a client request.
            </returns>
            <exception cref="T:System.Net.Sockets.SocketException">A socket call failed. Check the
            exception's ErrorCode property to determine the cause of the exception.</exception>
            <exception cref="T:System.InvalidOperationException">This object has not been started or is
            currently stopped or The HttpListener does not have any Uniform Resource Identifier
            (URI) prefixes to respond to.</exception>
            <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
            <example>This example shows how to call the
            <itemref>GetContext</itemref> method.
            <code>
            HttpListener myListener = new HttpListener("http", -1);
            myListener.Start();
            while (true)
            {
                HttpListenerResponse response = null;
                try
                {
                    Debug.Print("Waiting for requests");
                    HttpListenerContext context = myListener.GetContext();
            </code>
            </example>
        </member>
        <member name="P:System.Net.HttpListener.IsListening">
            <summary>
            Gets whether the <itemref>HttpListener</itemref> service was started
            and is waiting for client connections.
            </summary>
            <value><itemref>true</itemref> if the
            <itemref>HttpListener</itemref> was started; otherwise,
            <itemref>false</itemref>.</value>
        </member>
        <member name="P:System.Net.HttpListener.MaximumResponseHeadersLength">
            <summary>
            Gets or sets the maximum allowed length of the response headers, in
            KB.
            </summary>
            <value>The length, in kilobytes (1024 bytes), of the response
            headers.</value>
            <remarks>
            The length of the response header includes the response status line
            and any extra control characters that are received as part of the
            HTTP protocol.  A value of -1 means no limit is imposed on the
            response headers; a value of 0 means that all requests fail.  If
            this property is not explicitly set, it defaults to 4 (KB).
            </remarks>
        </member>
        <member name="P:System.Net.HttpListener.HttpsCert">
            <summary>
            The certificate used if <see cref="T:System.Net.HttpListener"/> implements an https server.
            </summary>
        </member>
        <member name="T:System.Net.HttpListenerContext">
            <summary>
            Provides access to the request and response objects used by the
            <itemref>HttpListener</itemref> class.  This class cannot be inherited.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerContext.m_IsHTTPRequestParsed">
            <summary>
            A flag that indicates whether an HTTP request was parsed.
            </summary>
            <remarks>
            The HTTP request is parsed upon the first access to the Request to
            Response property.  Access to that property might be done from a
            different thread than the thread that is used for construction of
            the HttpListenerContext.
            </remarks>
        </member>
        <member name="F:System.Net.HttpListenerContext.m_clientOutputStream">
            <summary>
            Member with network stream connected to client.
            This stream is used for writing data.
            This stream owns the socket.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerContext.m_clientInputStream">
            <summary>
            Member with network stream connected to client.
            This stream is used for Reading data.
            This stream does not own the socket.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerContext.m_ClientRequest">
            <summary>
            Instance of the request from client.
            it is a server side representation of HttpWebRequest.
            It is the same data, but instead of composing request we parse it.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerContext.m_ResponseToClient">
             <summary>
             Instance of the response to client.
            
             </summary>
        </member>
        <member name="M:System.Net.HttpListenerContext.#ctor(System.Net.OutputNetworkStreamWrapper,System.Net.HttpListener)">
            <summary>
            Internal constructor, used each time client connects.
            </summary>
            <param name="clientStream">The stream that is connected to the client. A stream is needed, to
            provide information about the connected client.
            See also the <see cref="T:System.Net.HttpListenerRequest"/> class.
            </param>
            <param name="httpListener">TBD</param>
        </member>
        <member name="P:System.Net.HttpListenerContext.Request">
            <summary>
            Gets the <itemref>HttpListenerRequest</itemref> that represents a
            client's request for a resource.
            </summary>
            <value>An <itemref>HttpListenerRequest</itemref> object that
            represents the client request.</value>
        </member>
        <member name="P:System.Net.HttpListenerContext.Response">
            <summary>
            Gets the <itemref>HttpListenerResponse</itemref> object that will be
            sent to the client in response to the client's request.
            </summary>
            <value>An <itemref>HttpListenerResponse</itemref> object used to
            send a response back to the client.</value>
        </member>
        <member name="M:System.Net.HttpListenerContext.Close(System.Int32)">
            <summary>
            Closes the stream attached to this listener context. 
            </summary>
        </member>
        <member name="T:System.Net.HttpListenerRequest">
            <summary>
            Describes an incoming HTTP request to an
            <see cref="T:System.Net.HttpListener"/> object.
            </summary>
            <remarks>
            When a client makes a request to a Uniform Resource Identifier (URI)
            handled by an <itemref>HttpListener</itemref> object, the
            <itemref>HttpListener</itemref> provides an
            <see cref="T:System.Net.HttpListenerContext"/> object that contains
            information about the sender, the request, and the response that is sent
            to the client. The <see cref="P:System.Net.HttpListenerContext.Request"/>
            property returns the <itemref>HttpListenerRequest</itemref> object that
            describes the request.
            <para>
            The <itemref>HttpListenerRequest</itemref> object contains information
            about the request, such as the request
            <see cref="P:System.Net.HttpListenerRequest.HttpMethod"/> string,
            <see cref="P:System.Net.HttpListenerRequest.UserAgent"/> string, and
            request body data (see the
            <see cref="P:System.Net.HttpListenerRequest.InputStream"/>
            property).</para>
            <para>
            To reply to the request, you must get the associated response using the
            <see cref="P:System.Net.HttpListenerContext.Response"/> property.</para>
            </remarks>
        </member>
        <member name="F:System.Net.HttpListenerRequest.m_RequestString">
            <summary>
            The original string with the request.  For example,
            "GET /Index.htm HTTP/1.1".
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerRequest.m_maxResponseHeadersLen">
            <summary>
            The maximum length of the request headers, in KB (1024 bytes).
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerRequest.m_requestVerb">
            <summary>
            The verb of the request parsed from m_RequestString.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerRequest.m_rawURL">
            <summary>
            URL of request parsed from m_RequestString.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerRequest.m_requestHttpVer">
            <summary>
            HTTP version from m_RequestString.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerRequest.m_KeepAlive">
            <summary>
             Indicates whether the client requests a persistent connection.
             If client did not specify "Connection" header - default is false.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerRequest.m_httpRequestHeaders">
            <summary>
            The request Headers From HTTP client.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerRequest.m_clientStream">
             <summary>
             Member with network stream connected to client.
            
             </summary>
        </member>
        <member name="F:System.Net.HttpListenerRequest.m_contentLength">
            <summary>
            The length of the content in the body of the request, if a body is
            present.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerRequest.m_NetworkCredentials">
            <summary>
            Keep NetworkCredential if user have send user name and password.
            </summary>
        </member>
        <member name="M:System.Net.HttpListenerRequest.#ctor(System.Net.InputNetworkStreamWrapper,System.Int32)">
            <summary>
            Constructs a HttpListenerRequest is created by HttpListenerContext.
            </summary>
            <param name="clientStream">Network stream to the client.</param>
            <param name="maxHeaderLen">TBD</param>
        </member>
        <member name="M:System.Net.HttpListenerRequest.ParseHTTPRequest">
            <summary>
            Parses request from client.
            Fills
            - HTTP Verb.
            - HTTP version.
            - Content Length.
            - Fills generic value name pair in WEB header collection.
            </summary>
        </member>
        <member name="P:System.Net.HttpListenerRequest.HttpMethod">
            <summary>
            Gets the HTTP method specified by the client.
            </summary>
            <value>A <itemref>String</itemref> that contains the method used in
            the request.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.RawUrl">
            <summary>
            Gets the URL information (without the host and port) requested by
            the client.
            </summary>
            <value>A <itemref>String</itemref> that contains the raw URL for
            this request.</value>
            <remarks>
            This URL information is the URL requested in the first request line.
            </remarks>
        </member>
        <member name="P:System.Net.HttpListenerRequest.AcceptTypes">
            <summary>
            Gets the MIME types accepted by the client.
            </summary>
            <value>A <itemref>String</itemref> array that contains the type
            names specified in the request's Accept header, or a null reference
            if the client request did not include an Accept header.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.ContentLength64">
            <summary>
            Gets the length of the body data included in the request.
            </summary>
            <remarks>
            The Content-Length header expresses the length, in bytes, of the
            body data that accompanies the request.
            enumeration.
            </remarks>
            <value>The value from the request's Content-Length header. This
            value is -1 if the content length is not known.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.ContentType">
            <summary>
            Gets the MIME type of the body data included in the request.
            </summary>
            <value>A <itemref>String</itemref> that contains the text of the
            request's Content-Type header.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.Headers">
            <summary>
            Gets the collection of header name/value pairs sent in the request.
            </summary>
            <value>A <itemref>WebHeaderCollection</itemref> that contains the
            HTTP headers included in the request.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.InputStream">
            <summary>
            Gets a stream that contains the body data sent by the client.
            </summary>
            <value>A readable <itemref>Stream</itemref> object that contains the
            bytes sent by the client in the body of the request.  This property
            returns <itemref>Null</itemref> if no data is sent with the request.
            </value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.IsAuthenticated">
            <summary>
            Gets a Boolean value that indicates whether the client sending this
            request is authenticated.
            </summary>
            <remarks>
            Because authentication is not supported, returns
            <itemref>false</itemref>.
            </remarks>
            <value>Because authentication is not supported, returns
            <itemref>false</itemref>.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.KeepAlive">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value that indicates whether the
            client requests a persistent connection.
            </summary>
            <remarks>
            This property is set during parsing of HTTP header.
            </remarks>
            <value><itemref>true</itemref> if the connection should be kept
            open; otherwise, <itemref>false</itemref>.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.LocalEndPoint">
            <summary>
            Gets the server IP address and port number to which the request is
            directed.  Not currently supported.
            </summary>
            <value>An <itemref>IPEndPoint</itemref> that represents the IP
            address that the request is sent to.
            </value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.ProtocolVersion">
            <summary>
            Gets the HTTP version used by the requesting client.
            </summary>
            <remarks>
            The capabilities of different HTTP versions are specified in the
            documents available at http://www.rfc-editor.org.
            </remarks>
            <value>A <itemref>Version</itemref> that identifies the client's
            version of HTTP.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.RemoteEndPoint">
            <summary>
            Gets the client IP address and port number from which the request
            originated.
            </summary>
            <value>An <itemref>IPEndPoint</itemref> that represents the IP
            address and port number from which the request originated.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.Url">
            <summary>
            Gets the Uri object requested by the client.  Not currently
            supported.
            </summary>
        </member>
        <member name="P:System.Net.HttpListenerRequest.UserAgent">
            <summary>
            Gets the user agent presented by the client.
            </summary>
            <value>A <itemref>String</itemref> object that contains the text of
            the request's User-Agent header.</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:System.Net.HttpListenerRequest.UserHostAddress">
            <summary>
            Gets the server IP address and port number to which the request is
            directed.
            </summary>
            <value>A <itemref>String</itemref> that contains the host address
            information.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.UserHostName">
            <summary>
            Gets the DNS name and, if provided, the port number specified by the
            client.
            </summary>
            <value>A String value that contains the text of the request's Host header.</value>
        </member>
        <member name="P:System.Net.HttpListenerRequest.Credentials">
            <summary>
            Return NetworkCredential if user have send user name and password.
            </summary>
        </member>
        <member name="P:System.Net.HttpListenerRequest.UserLanguages">
            <summary>
            Gets the natural languages that are preferred for the response.
            </summary>
            <value>A <itemref>String</itemref> array that contains the languages
            specified in the request's <itemref>AcceptLanguage</itemref> header,
            or <itemref>null</itemref> if the client request did not include an
            <itemref>AcceptLanguage</itemref> header.</value>
        </member>
        <member name="T:System.Net.HttpListenerResponse">
            <summary>
            Represents a response to a request being handled by an
            <see cref="T:System.Net.HttpListener"/> object.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_WasResponseSent">
            <summary>
            A flag that indicates whether the response was already sent.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_IsResponseClosed">
            <summary>
            A flag that indicates that the response was closed.
            Writing to client is not allowed after response is closed.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_ContentLength">
            <summary>
            The length of the content of the response.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_httpResponseHeaders">
            <summary>
            The response headers from the HTTP client.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_version">
            <summary>
            The HTTP version for the response.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_KeepAlive">
            <summary>
            Indicates whether the server requests a persistent connection.
            Persistent connection is used if KeepAlive is <itemref>true</itemref>
            in both the request and the response.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_Encoding">
            <summary>
            Encoding for this response's OutputStream.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_contentType">
            <summary>
            Keeps content type for the response, set by user application.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_ResponseStatusCode">
            <summary>
            Response status code.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_Listener">
            <summary>
            Array of connected client streams
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_clientStream">
            <summary>
            Member with network stream connected to client.
            After call to Close() the stream is closed, no further writing allowed.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_redirectLocation">
            <summary>
            The value of the HTTP Location header in this response.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_sendChunked">
            <summary>
            Response uses chunked transfer encoding.
            </summary>
        </member>
        <member name="F:System.Net.HttpListenerResponse.m_statusDescription">
            <summary>
            text description of the HTTP status code returned to the client.
            </summary>
        </member>
        <member name="M:System.Net.HttpListenerResponse.ThrowIfResponseSent">
            <summary>
            Throws InvalidOperationException is HTTP response was sent.
            Called before setting of properties.
            </summary>
        </member>
        <member name="M:System.Net.HttpListenerResponse.#ctor(System.Net.OutputNetworkStreamWrapper,System.Net.HttpListener)">
            <summary>
            HttpListenerResponse is created by HttpListenerContext
            </summary>
            <param name="clientStream">Network stream to the client</param>
            <param name="httpListener">TBD</param>
        </member>
        <member name="M:System.Net.HttpListenerResponse.PrepareHeaders">
            <summary>
            Updates the HTTP WEB header collection to prepare it for request.
            For each property set it adds member to m_httpResponseHeaders.
            m_httpResponseHeaders is serializes to string and sent to client.
            </summary>
        </member>
        <member name="M:System.Net.HttpListenerResponse.ComposeHTTPResponse">
            <summary>
            Composes HTTP response line based on
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.HttpListenerResponse.SendHeaders">
            <summary>
            Sends HTTP status and headers to client.
            </summary>
        </member>
        <member name="P:System.Net.HttpListenerResponse.StatusCode">
            <summary>
            Gets or sets the HTTP status code to be returned to the client.
            </summary>
            <value>An <itemref>Int32</itemref> value that specifies the
            <see cref="T:System.Net.HttpStatusCode"/> for the requested resource.
            The default is <itemref>OK</itemref>, indicating that the server
            successfully processed the client's request and included the
            requested resource in the response body.</value>
        </member>
        <member name="P:System.Net.HttpListenerResponse.ContentLength64">
            <summary>
            Gets or sets the number of bytes in the body data included in the
            response.
            </summary>
            <value>The value of the response's <itemref>Content-Length</itemref>
            header.</value>
        </member>
        <member name="P:System.Net.HttpListenerResponse.Headers">
            <summary>
            Gets or sets the collection of header name/value pairs that is
            returned by the server.
            </summary>
            <value>A <itemref>WebHeaderCollection</itemref> instance that
            contains all the explicitly set HTTP headers to be included in the
            response.</value>
        </member>
        <member name="P:System.Net.HttpListenerResponse.KeepAlive">
            <summary>
            Gets or sets whether the server requests a persistent connection.
            </summary>
            <value><itemref>true</itemref> if the server requests a persistent
            connection; otherwise, <itemref>false</itemref>.  The default is
            <itemref>true</itemref>.</value>
        </member>
        <member name="P:System.Net.HttpListenerResponse.OutputStream">
            <summary>
            Gets a <itemref>Stream</itemref> object to which a response can be
            written.
            </summary>
            <value>A <itemref>Stream</itemref> object to which a response can be
            written.</value>
            <remarks>
            The first write to the output stream sends a response to the client.
            </remarks>
        </member>
        <member name="P:System.Net.HttpListenerResponse.ProtocolVersion">
            <summary>
            Gets or sets the HTTP version that is used for the response.
            </summary>
            <value>A <itemref>Version</itemref> object indicating the version of
            HTTP used when responding to the client.  This property is obsolete.
            </value>
        </member>
        <member name="P:System.Net.HttpListenerResponse.RedirectLocation">
            <summary>
            Gets or sets the value of the HTTP <itemref>Location</itemref>
            header in this response.
            </summary>
            <value>A <itemref>String</itemref> that contains the absolute URL to
            be sent to the client in the <itemref>Location</itemref> header.
            </value>
        </member>
        <member name="P:System.Net.HttpListenerResponse.SendChunked">
            <summary>
            Gets or sets whether the response uses chunked transfer encoding.
            </summary>
            <value><itemref>true</itemref> if the response is set to use chunked
            transfer encoding; otherwise, <itemref>false</itemref>.  The default
            is <itemref>false</itemref>.</value>
        </member>
        <member name="P:System.Net.HttpListenerResponse.ContentEncoding">
            <summary>
            Gets or sets the encoding for this response's
            <itemref>OutputStream</itemref>.
            </summary>
            <value>An <itemref>Encoding</itemref> object suitable for use with
            the data in the
            <see cref="P:System.Net.HttpListenerResponse.OutputStream"/> property,
            or <itemref>null</itemref> reference if no encoding is specified.
            </value>
            <remarks>
            Only UTF8 encoding is supported.
            </remarks>
        </member>
        <member name="P:System.Net.HttpListenerResponse.ContentType">
            <summary>
            Gets or sets the MIME type of the returned content.
            </summary>
            <value>A <itemref>String</itemref> instance that contains the text
            of the response's <itemref>Content-Type</itemref> header.</value>
        </member>
        <member name="P:System.Net.HttpListenerResponse.StatusDescription">
            <summary>
            Gets or sets a text description of the HTTP status code that is
            returned to the client.
            </summary>
            <value>The text description of the HTTP status code returned to the
            client.</value>
        </member>
        <member name="M:System.Net.HttpListenerResponse.Close">
            <summary>
            Sends the response to the client and releases the resources held by
            this HttpListenerResponse instance.
            </summary>
            <remarks>
            This method flushes data to the client and closes the network
            connection.
            </remarks>
        </member>
        <member name="M:System.Net.HttpListenerResponse.System#IDisposable#Dispose">
            <summary>
            Closes the socket and sends the response if it was not done earlier
            and the socket is present.
            </summary>
        </member>
        <member name="M:System.Net.HttpListenerResponse.Finalize">
            <summary>
            Called to close the socket if necessary.
            </summary>
        </member>
        <member name="M:System.Net.HttpListenerResponse.GetStatusDescription(System.Int32)">
            <summary>
            Return default Description based in response status code.
            </summary>
            <param name="code">HTTP status code</param>
            <returns>
            Default string with description.
            </returns>
        </member>
        <member name="T:System.Net.HttpStatusCode">
            <summary>
            Contains the values of status codes defined for HTTP.
            </summary>
            <remarks>
            <p>Status codes indicate categories, as follows:</p>
            <p>1xx -- Informational.</p>
            <p>2xx -- Successful.</p>
            <p>3xx -- Redirection.</p>
            <p>4xx -- Client Error.</p>
            <p>5xx -- Server Error.</p>
            </remarks>
        </member>
        <member name="F:System.Net.HttpStatusCode.Continue">
            Informational -- 1xx.
            <summary>Equivalent to HTTP status 100.  Indicates that the client can continue with its
            request.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.SwitchingProtocols">
            <summary>Equivalent to HTTP status 101.  Indicates that the protocol version or protocol
            is being changed.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.OK">
            Successful -- 2xx.
            <summary>Equivalent to HTTP status 200.  Indicates that the request succeeded and that
            the requested information is in the response. This is the most common status code to
            receive.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Created">
            <summary>Equivalent to HTTP status 201.  Indicates that the request resulted in a new
            resource created before the response was sent.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Accepted">
            <summary>Equivalent to HTTP status 202. Indicates that the request has been accepted for
            further processing.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NonAuthoritativeInformation">
            <summary>Equivalent to HTTP status 203.  Indicates that the returned metainformation is
            from a cached copy instead of the origin server and therefore may be incorrect.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NoContent">
            <summary>Equivalent to HTTP status 204.  Indicates that the request has been successfully
            processed and that the response is intentionally blank.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.ResetContent">
            <summary>Equivalent to HTTP status 205.  Indicates that the client should reset (not
            reload) the current resource.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.PartialContent">
            <summary>Equivalent to HTTP status 206.  Indicates that the response is a
            partial response as requested by a GET request that includes a byte range.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.MultipleChoices">
            Redirection -- 3xx.
            <summary>Equivalent to HTTP status 300.  Indicates that the requested information has
            multiple representations.  The default action is to treat this status as a redirect and
            follow the contents of the Location header associated with this response.
            <para>If the <see cref="!:HttpWebRequest.AllowAutoRedirect"/> property is
            <itemref>false</itemref>, <itemref>MultipleChoices</itemref> will cause an exception to
            be thrown.</para>
            <para><itemref>MultipleChoices</itemref> is a synonym for <itemref>Ambiguous</itemref>.</para></summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Ambiguous">
            <summary>Equivalent to HTTP status 300.  Indicates that the requested
            information has multiple representations.  The default action is to treat this status as
            a redirect and follow the contents of the Location header associated with this response.
            <para>If the <see cref="!:HttpWebRequest.AllowAutoRedirect"/> property is
            <itemref>false</itemref>, <itemref>Ambiguous</itemref> will cause an exception to be
            thrown.</para>
            <para><itemref>Ambiguous</itemref> is a synonym for <itemref>MultipleChoices</itemref>.</para></summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.MovedPermanently">
            <summary>Equivalent to HTTP status 301. Indicates that the requested information has
            been moved to the URI specified in the Location header. The default action when this
            status is received is to follow the Location header associated with the response.
            <para><itemref>MovedPermanently</itemref> is a synonym for <itemref>Moved</itemref>.</para></summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Moved">
            <summary>Equivalent to HTTP status 301. Indicates that the requested information
            has been moved to the URI specified in the Location header. The default action when this
            status is received is to follow the Location header associated with the response. When
            the original request method was POST, the redirected request will use the GET method.
            <para><itemref>Moved</itemref> is a synonym for <itemref>MovedPermanently</itemref>.</para></summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Found">
            <summary>Equivalent to HTTP status 302. Indicates that the requested information is
            located at the URI specified in the Location header. The default action when this status
            is received is to follow the Location header associated with the response. When the
            original request method was POST, the redirected request will use the GET method.
            <para>If the <see cref="!:HttpWebRequest.AllowAutoRedirect"/> property is
            <itemref>false</itemref>, <itemref>Found</itemref> will cause an exception to be thrown.</para>
            <para><itemref>Found</itemref> is a synonym for <itemref>Redirect</itemref>.</para></summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Redirect">
            <summary>Equivalent to HTTP status 302. Indicates that the requested information is
            located at the URI specified in the Location header. The default action when this status
            is received is to follow the Location header associated with the response. When the
            original request method was POST, the redirected request will use the GET method.
            <para>If the <see cref="!:HttpWebRequest.AllowAutoRedirect"/> property is
            <itemref>false</itemref>, <itemref>Redirect</itemref> will cause an exception to be
            thrown.</para>
            <para><itemref>Redirect</itemref> is a synonym for <itemref>Found</itemref>.</para></summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.SeeOther">
            <summary>Equivalent to HTTP status 303. Automatically redirects the client to
            the URI specified in the Location header as the result of a POST. The request to the
            resource specified by the Location header will be made with a GET.
            <para>If the <see cref="!:HttpWebRequest.AllowAutoRedirect"/> property is
            <itemref>false</itemref>, <itemref>SeeOther</itemref> will cause an exception to be
            thrown.</para>
            <para><itemref>SeeOther</itemref> is a synonym for <itemref>RedirectMethod</itemref>.</para></summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RedirectMethod">
            <summary>Equivalent to HTTP status 303. Automatically redirects the
            client to the URI specified in the Location header as the result of a POST. The request
            to the resource specified by the Location header will be made with a GET.
            <para>If the <see cref="!:HttpWebRequest.AllowAutoRedirect"/> property is
            <itemref>false</itemref>, <itemref>RedirectMethod</itemref> will cause an exception to
            be thrown.</para>
            <para><itemref>RedirectMethod</itemref> is a synonym for <itemref>SeeOther</itemref>.</para></summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NotModified">
            <summary>Equivalent to HTTP status 304. Indicates that the client's cached copy is
            up-to-date. The contents of the resource are not transferred.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.UseProxy">
            <summary>Equivalent to HTTP status 305. Indicates that the request should use the proxy
            server at the URI specified in the Location header.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Unused">
            <summary>Equivalent to HTTP status 306. This value is a proposed extension to the HTTP/1.1
            specification that is not fully specified.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.TemporaryRedirect">
            <summary>Equivalent to HTTP status 307. Indicates that the request information is
            located at the URI specified in the Location header. The default action when this status
            is received is to follow the Location header associated with the response. When the
            original request method was POST, the redirected request will also use the POST method.
            <para>If the <see cref="!:HttpWebRequest.AllowAutoRedirect"/> property is
            <itemref>false</itemref>, <itemref>TemporaryRedirect</itemref> will cause an exception
            to be thrown.</para>
            <para><itemref>TemporaryRedirect</itemref> is a synonym for <itemref>RedirectKeepVerb</itemref>.</para></summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RedirectKeepVerb">
            <summary>Equivalent to HTTP status 307. Indicates that the request
            information is located at the URI specified in the Location header. The default action
            when this status is received is to follow the Location header associated with the
            response. When the original request method was POST, the redirected request will also
            use the POST method.
            <para>If the <see cref="!:HttpWebRequest.AllowAutoRedirect"/> property is
            <itemref>false</itemref>, <itemref>RedirectKeepVerb</itemref> will cause an exception to
            be thrown.</para>
            <para><itemref>RedirectKeepVerb</itemref> is a synonym for <itemref>TemporaryRedirect</itemref>.</para></summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.BadRequest">
            Client Error -- 4xx.
            <summary>Equivalent to HTTP status 400. Indicates that the request could not be
            understood by the server. <itemref>BadRequest</itemref> is sent when no other error is
            applicable, or if the exact error is unknown or does not have its own error code.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Unauthorized">
            <summary>Equivalent to HTTP status 401. Indicates that the requested
            resource requires authentication. The WWW-Authenticate header contains the details of
            how to perform the authentication.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.PaymentRequired">
            <summary>Equivalent to HTTP status 402. Reserved for future use.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Forbidden">
            <summary>Equivalent to HTTP status 403. Indicates that the server refuses to
            fulfill the request.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NotFound">
            <summary>Equivalent to HTTP status 404. Indicates that the requested resource
            does not exist on the server.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.MethodNotAllowed">
            <summary>Equivalent to HTTP status 405. Indicates that the request
            method (POST or GET) is not allowed on the requested resource.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NotAcceptable">
            <summary>Equivalent to HTTP status 406. Indicates that the client has
            indicated with Accept headers that it will not accept any of the available
            representations of the resource.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired">
            <summary>Equivalent to HTTP status 407. Indicates that the
            requested proxy requires authentication. The Proxy-authenticate header contains the
            details of how to perform the authentication.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RequestTimeout">
            <summary>Equivalent to HTTP status 408. Indicates that the client did not
            send a request within the time the server was expecting the request.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Conflict">
            <summary>Equivalent to HTTP status 409. Indicates that the request could not be
            carried out because of a conflict on the server.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.Gone">
            <summary>Equivalent to HTTP status 410. Indicates that the requested resource is no
            longer available.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.LengthRequired">
            <summary>Equivalent to HTTP status 411. Indicates that the required
            Content-length header is missing.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.PreconditionFailed">
            <summary>Equivalent to HTTP status 412. Indicates that a condition
            set for this request failed, and the request cannot be carried out.  Conditions are set
            with conditional request headers like If-Match, If-None-Match, or If-Unmodified-Since.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RequestEntityTooLarge">
            <summary>Equivalent to HTTP status 413. Indicates that the request
            is too large for the server to process.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RequestUriTooLong">
            <summary>Equivalent to HTTP status 414. Indicates that the URI is too
            long.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.UnsupportedMediaType">
            <summary>Equivalent to HTTP status 415. Indicates that the request
            is an unsupported type.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
            <summary>Equivalent to HTTP status 416. Indicates that the
            range of data requested from the resource cannot be returned, either because the
            beginning of the range is before the beginning of the resource, or the end of the range
            is after the end of the resource.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.ExpectationFailed">
            <summary>Equivalent to HTTP status 417. Indicates that an expectation
            given in an Expect header could not be met by the server.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.InternalServerError">
            Server Error -- 5xx.
            <summary>Equivalent to HTTP status 500. Indicates that a generic
            error has occurred on the server.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.NotImplemented">
            <summary>Equivalent to HTTP status 501. Indicates that the server does
            not support the requested function.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.BadGateway">
            <summary>Equivalent to HTTP status 502. Indicates that an intermediate proxy
            server received a bad response from another proxy or the origin server.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.ServiceUnavailable">
            <summary>Equivalent to HTTP status 503. Indicates that the server is
            temporarily unavailable, usually due to high load or maintenance.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.GatewayTimeout">
            <summary>Equivalent to HTTP status 504. Indicates that an intermediate
            proxy server timed out while waiting for a response from another proxy or the origin
            server.</summary>
        </member>
        <member name="F:System.Net.HttpStatusCode.HttpVersionNotSupported">
            <summary>Equivalent to HTTP status 505. Indicates that the
            requested HTTP version is not supported by the server.</summary>
        </member>
        <member name="T:System.Net.HttpStatusRange">
             <summary>
             Range for the HTTP status codes.
            </summary>
        </member>
        <member name="F:System.Net.HttpStatusRange.MaxOkStatus">
            <summary>TBD</summary>
        </member>
        <member name="F:System.Net.HttpStatusRange.MaxRedirectionStatus">
            <summary>TBD</summary>
        </member>
        <member name="T:System.Net.HttpVersion">
            <summary>
            Defines the HTTP version numbers that are supported by the
            <see cref="!:HttpWebRequest"/> and
            <see cref="!:HttpWebResponse"/> classes.
            </summary>
        </member>
        <member name="F:System.Net.HttpVersion.Version10">
            <summary>
            Defines a <see cref="T:System.Version"/> instance for HTTP 1.0.
            </summary>
        </member>
        <member name="F:System.Net.HttpVersion.Version11">
            <summary>
            Defines a <see cref="T:System.Version"/> instance for HTTP 1.1.
            </summary>
        </member>
        <member name="T:System.Net.CoreResponseData">
            <summary>
            Used during parsing to capture all the information contained in the http
            status line and headers.
            </summary>
        </member>
        <member name="T:System.Net.HttpKnownHeaderNames">
            <summary>
            Contains known HTTP header names.
            </summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.CacheControl">
            <summary>The <b>Cache-Control</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Connection">
            <summary>The <b>Connection</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Date">
            <summary>The <b>Date</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.KeepAlive">
            <summary>The <b>Keep-Alive</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Pragma">
            <summary>The <b>Pragma</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ProxyConnection">
            <summary>The <b>Proxy-Connection</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Trailer">
            <summary>The <b>Trailer</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.TransferEncoding">
            <summary>The <b>Transfer-Encoding</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Upgrade">
            <summary>The <b>Upgrade</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Via">
            <summary>The <b>Via</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Warning">
            <summary>The <b>Warning</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ContentLength">
            <summary>The <b>Content-Length</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ContentType">
            <summary>The <b>Content-Type</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ContentID">
            <summary>The <b>Content-ID</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ContentEncoding">
            <summary>The <b>Content-Encoding</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ContentTransferEncoding">
            <summary>The <b>Content-Transfer-Encoding</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ContentLanguage">
            <summary>The <b>Content-Language</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ContentLocation">
            <summary>The <b>Content-Location</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ContentRange">
            <summary>The <b>Content-Range</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Expires">
            <summary>The <b>Expires</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.LastModified">
            <summary>The <b>Last-Modified</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Age">
            <summary>The <b>Age</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Location">
            <summary>The <b>Location</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ProxyAuthenticate">
            <summary>The <b>Proxy-Authenticate</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.RetryAfter">
            <summary>The <b>Retry-After</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Server">
            <summary>The <b>Server</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.SetCookie">
            <summary>The <b>Set-Cookie</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.SetCookie2">
            <summary>The <b>Set-Cookie2</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Vary">
            <summary>The <b>Vary</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.WWWAuthenticate">
            <summary>The <b>WWW-Authenticate</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Accept">
            <summary>The <b>Accept</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.AcceptCharset">
            <summary>The <b>Accept-Charset</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.AcceptEncoding">
            <summary>The <b>Accept-Encoding</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.AcceptLanguage">
            <summary>The <b>Accept-Language</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Authorization">
            <summary>The <b>Authorization</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Cookie">
            <summary>The <b>Cookie</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Cookie2">
            <summary>The <b>Cookie2</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Expect">
            <summary>The <b>Expect</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.From">
            <summary>The <b>From</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Host">
            <summary>The <b>Host</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.IfMatch">
            <summary>The <b>If-Match</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.IfModifiedSince">
            <summary>The <b>If-Modified-Since</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.IfNoneMatch">
            <summary>The <b>If-None-Match</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.IfRange">
            <summary>The <b>If-Range</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.IfUnmodifiedSince">
            <summary>The <b>If-Unmodified-Since</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.MaxForwards">
            <summary>The <b>Max-Forwards</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ProxyAuthorization">
            <summary>The <b>Proxy-Authorization</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Referer">
            <summary>The <b>Referer</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Range">
            <summary>The <b>Range</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.UserAgent">
            <summary>The <b>User-Agent</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ContentMD5">
            <summary>The <b>Content-MD5</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.ETag">
            <summary>The <b>ETag</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.TE">
            <summary>The <b>TE</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.Allow">
            <summary>The <b>Allow</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.AcceptRanges">
            <summary>The <b>Accept-Ranges</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.MimeVersion">
            <summary>The <b>MIME-Version</b> HTTP header.</summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.SecWebSocketAccept">
            <summary>
            The <b>Sec-WebSocket-Accept</b> HTTP header.
            </summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.SecWebSocketProtocol">
            <summary>
            The <b>Sec-WebSocket-Protocol</b> HTTP header.
            </summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.SecWebSocketVersion">
            <summary>
            The <b>Sec-WebSocket-Version</b> HTTP header.
            </summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderNames.SecWebSocketKey">
            <summary>
            The <b>Sec-WebSocket-Key</b> HTTP header.
            </summary>
        </member>
        <member name="T:System.Net.HttpKnownHeaderValues">
            <summary>
            TBD
            </summary>
        </member>
        <member name="F:System.Net.HttpKnownHeaderValues.close">
            <summary>TBD</summary>
        </member>
        <member name="T:System.Net.HttpContinueDelegate">
            <summary>
            Represents the method that notifies callers when a continue response is
            received by the client.
            </summary>
            <param name="StatusCode">The numeric value of the HTTP status from the
            server.</param>
            <param name="httpHeaders">The headers returned with the 100-continue
            response from the server.</param>
        </member>
        <member name="T:System.Net.HttpWriteMode">
            <summary>
            Controls the way an entity body is posted.
            </summary>
        </member>
        <member name="T:System.Net.KnownVerbs">
            <summary>
            Known Verbs are verbs that require special handling.
            </summary>
        </member>
        <member name="T:System.Net.HttpProtocolUtils">
            <summary>
             A collection of utility functions for HTTP usage.
            </summary>
        </member>
        <member name="M:System.Net.HttpProtocolUtils.string2date(System.String)">
            <summary>
            Parse String to DateTime format.
            </summary>
            <param name="S">String with date.</param>
            <returns>DateTime object that represent the same value as in input string.</returns>
        </member>
        <member name="T:System.Net.IWebProxy">
            <summary>
            Provides the base interface for implementing proxy access for the
            <see cref="!:WebRequest"/> class.
            </summary>
        </member>
        <member name="M:System.Net.IWebProxy.GetProxy(System.Uri)">
            <summary>
            Returns the URI of a proxy.
            </summary>
            <param name="destination">The destination URI.</param>
            <returns>A <b>Uri</b> instance that contains the URI of the proxy
            used to contact <paramref name="destination"/>.</returns>
        </member>
        <member name="M:System.Net.IWebProxy.IsBypassed(System.Uri)">
            <summary>
            Indicates whether the proxy should not be used for the specified
            host.
            </summary>
            <param name="host">The host to check, to determine whether the proxy
            is needed to access it.</param>
            <returns>Whether the proxy should not be used for the specified
            host.</returns>
        </member>
        <member name="T:System.Net.NetworkCredential">
            <summary>
            Class that keeps user name and password.
            </summary>
        </member>
        <member name="M:System.Net.NetworkCredential.#ctor">
            <summary>
            Construct class with empty user name and password
            </summary>
        </member>
        <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String)">
            <summary>
            Constructs credientials and initializes them by provided user name and pssword
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String,System.Net.AuthenticationType)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.NetworkCredential"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="authenticationType">Type of the authentication.</param>
        </member>
        <member name="P:System.Net.NetworkCredential.UserName">
            <summary>
            Set or get user name.
            </summary>
        </member>
        <member name="P:System.Net.NetworkCredential.Password">
            <summary>
            Set or get password.
            </summary>
        </member>
        <member name="P:System.Net.NetworkCredential.AuthenticationType">
            <summary>
            Gets or sets the type of the authentication.
            </summary>
            <value>The type of the authentication.</value>
        </member>
        <member name="T:System.Net.ProtocolViolationException">
            <summary>
            The exception that is thrown when an error is made while using a network
            protocol.
            </summary>
        </member>
        <member name="M:System.Net.ProtocolViolationException.#ctor">
            <summary>
            Initializes a new instance of the
            <itemref>ProtocolViolationException</itemref> class.
            </summary>
        </member>
        <member name="M:System.Net.ProtocolViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <itemref>ProtocolViolationException</itemref> class with the
            specified message.
            </summary>
            <param name="message">The error message string.</param>
        </member>
        <member name="T:System.Net.WebException">
            <summary>
            Defines the exception that is thrown by
            <see cref="!:WebRequest"/> instances when an error occurs.
            </summary>
            <remarks>
            This class is a subclass of <itemref>InvalidOperationException</itemref>
            that contains a <itemref>WebExceptionStatus</itemref> and possibly a
            reference to a <itemref>WebResponse</itemref>.  The
            <itemref>WebResponse</itemref> is only present if there is a response
            from the remote server.
            </remarks>
        </member>
        <member name="M:System.Net.WebException.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:System.Net.WebException.#ctor(System.String)">
            <summary>
            Constructs a <itemref>WebException</itemref> based on the specified
            message string.
            </summary>
            <param name="message">The message string for the exception.</param>
        </member>
        <member name="M:System.Net.WebException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a <itemref>WebException</itemref> based on the specified
            message string and inner exception.
            </summary>
            <param name="message">The message string for the exception.</param>
            <param name="innerException">The exception that caused this
            exception.</param>
        </member>
        <member name="M:System.Net.WebException.#ctor(System.String,System.Net.WebExceptionStatus)">
            <summary>
            Constructs a <itemref>WebException</itemref> based on the specified
            message string and <itemref>WebExceptionStatus</itemref>.
            </summary>
            <param name="message">The message string for the exception.</param>
            <param name="status">The network status of the exception.</param>
        </member>
        <member name="M:System.Net.WebException.#ctor(System.String,System.Exception,System.Net.WebExceptionStatus,System.Net.WebResponse)">
            <summary>
            Constructs a <itemref>WebException</itemref> based on the specified
            message string, inner exception,
            <see cref="T:System.Net.WebExceptionStatus"/>, and
            <see cref="T:System.Net.WebResponse"/>.
            </summary>
            <param name="message">Message string for exception.</param>
            <param name="inner">The exception that caused this exception.
            </param>
            <param name="status">The network status of the exception.</param>
            <param name="response">The <itemref>WebResponse</itemref> we have.
            </param>
        </member>
        <member name="P:System.Net.WebException.Status">
            <summary>
            Gets the <itemref>WebExceptionStatus</itemref> code.
            </summary>
            <value>One of the <b>WebExceptionStatus</b> values.</value>
        </member>
        <member name="P:System.Net.WebException.Response">
            <summary>
            Gets the response that the remote host returned.
            </summary>
            <value>If a response is available from the Internet resource, a
            <itemref>WebResponse</itemref> instance that contains the error
            response from an Internet resource; otherwise,
            <itemref>null</itemref>.</value>
        </member>
        <member name="T:System.Net.HeaderValuePair">
            <summary>
            Contains a name/value pair that is used in an HTTP header.
            </summary>
        </member>
        <member name="T:System.Net.HeaderValueCollection">
            <summary>
            Keeps an array of name/value pairs that are in HTTP headers.
            </summary>
        </member>
        <member name="M:System.Net.HeaderValueCollection.GetValuePair(System.String)">
            <summary>
            Searches in the collection for the header with the same name.
            </summary>
            <param name="header">The header to seach for.</param>
            <returns>The name/value pair if found; otherwise, null.</returns>
            <remarks>
            Header comparison is case-insensitive.
            <para>
            In the desktop and Compact Framework versions of .NET, the array is
            represented by a hash table.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.HeaderValueCollection.Add(System.String,System.String)">
            <summary>
            Adds a header and a value for the header into the collection.
            </summary>
            <param name="header">String for header</param>
            <param name="value">String for value</param>
            <remarks>
            If the specified header is already present, the value is appended to
            that header.
            </remarks>
        </member>
        <member name="M:System.Net.HeaderValueCollection.Set(System.String,System.String)">
            <summary>
            Replaces the previous values for the header with the new value.
            </summary>
            <param name="header">Header name</param>
            <param name="value">New value</param>
        </member>
        <member name="M:System.Net.HeaderValueCollection.RemoveHeader(System.String)">
            <summary>
            Removes the header that has the specified name.
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="T:System.Net.WebHeaderCollection">
            <summary>
            Contains protocol headers associated with a request or response.
            Manages name-value pairs for HTTP headers.
            </summary>
            <remarks>
            This class includes additional methods, including HTTP parsing of a
            collection into a buffer that can be sent.
            <para>
            Headers are validated when attempting to add them.
            </para>
            </remarks>
        </member>
        <member name="F:System.Net.WebHeaderCollection.ApproxAveHeaderLineSize">
            <summary>
            Data and constants.
            </summary>
        </member>
        <member name="F:System.Net.WebHeaderCollection.head_val_coll">
            <summary>
            Array list of headers and values
            </summary>
        </member>
        <member name="F:System.Net.WebHeaderCollection.m_IsHttpWebHeaderObject">
            <summary>
            true if this object is created for internal use, in this case
            we turn on checking when adding special headers.
            </summary>
        </member>
        <member name="F:System.Net.WebHeaderCollection._isWebSocket">
            <summary>
            true is this collection is created for a WebSocket request
            </summary>
        </member>
        <member name="M:System.Net.WebHeaderCollection.AddWithoutValidate(System.String,System.String)">
            <summary>
            Adds header name/value pair to collection. Does not check if
            multiple values are allowed.
            </summary>
            <param name="headerName">Name in header </param>
            <param name="headerValue">Value in header </param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.SetAddVerified(System.String,System.String)">
            <summary>
            Adds header name/value pair to collection.
            If multi value allowed for this header name - adds new one
            If multi value is not allowed, replace the old value with new one
            </summary>
            <param name="name">Name in header </param>
            <param name="value">Value in header </param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.AddInternal(System.String,System.String)">
            <summary>
            Just internal fast add.
            </summary>
            <param name="headerName"></param>
            <param name="headerValue"></param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.ChangeInternal(System.String,System.String)">
            <summary>
            Internal fast channge
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.RemoveInternal(System.String)">
            <summary>
            Internal remove of header.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.CheckUpdate(System.String,System.String)">
            <summary>
            Changes to new value. Check for illegal characters first.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.CheckBadChars(System.String,System.Boolean)">
            <summary>
            Throws an error if invalid chars are found in the header name or
            value.
            </summary>
            <param name="name">The header name or header value string to
            check.</param>
            <param name="isHeaderValue">Whether the name parameter is a header
            name or a header value.</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.WebHeaderCollection.ThrowOnRestrictedHeader(System.String)">
            <summary>
            Throws an exception if the user passed in a reserved string as the
            header name.
            </summary>
            <param name="headerName"></param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Add(System.String,System.String)">
            <summary>
            Inserts a header with the specified name and value into the
            collection.
            </summary>
            <param name="name">The name of the header that is being added to the
            collection.</param>
            <param name="value">The content of the header that is being added
            (its header-value).  If a header with the specified name already
            exists, this value is concatenated onto the existing header.</param>
            <remarks>
            If a header with the specified name already exists, the header that
            is being added is concatenated onto the existing header.
            <para>
            Throws an exception if the specified header name is the name of a
            special header.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Add(System.String)">
            <summary>
            Inserts a new header into the collection.
            </summary>
            <param name="header">A header name/value pair, in the format
            "myHeaderName:myValue".</param>
            <remarks>
            This method expects a string with the format "myName:myValue", and
            parses the two parts out.
            <para>
            If a header with the specified name already exists, the header that
            is being added is concatenated onto the existing header.
            </para>
            <para>
            Throws an exception if the specified header name is the name of a
            special header.
            </para>
            </remarks>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Set(System.String,System.String)">
            <summary>
            Sets the specified header to the specified value.
            </summary>
            <param name="name">The header to set.</param>
            <param name="value">The content of the header to set.</param>
            <remarks>
            Includes validation.
            Throws an exception if the specified header name is the name of a
            special header.
            </remarks>
        </member>
        <member name="M:System.Net.WebHeaderCollection.Remove(System.String)">
            <summary>
            Removes the specified header from the collection.
            </summary>
            <param name="name">The name of the header to remove.</param>
            <remarks>
            Throws an exception if the specified header name is the name of a
            special header.
            </remarks>
        </member>
        <member name="M:System.Net.WebHeaderCollection.GetValues(System.String)">
            <summary>
            Returns the values for the specified header name.
            </summary>
            <param name="header">The name of the header.</param>
            <returns>An array of parsed string objects.</returns>
            <remarks>
            Takes a header name and returns a string array representing
            the individual values for that header.  For example, if the headers
            contain the following line:
            <code>
            Accept: text/plain, text/html
            </code>
            then <c>GetValues("Accept")</c> returns an array of
            two strings: "text/plain" and "text/html".
            </remarks>
        </member>
        <member name="M:System.Net.WebHeaderCollection.ToString">
            <summary>
            Generates a string representation of the headers, that is ready to
            be sent except for it being in String format.
            </summary>
            <returns>A string representation of the headers.</returns>
            <remarks>
            The format looks like the following:
            <code>
            Header-Name: Header-Value\r\n
            Header-Name2: Header-Value2\r\n
            ...
            Header-NameN: Header-ValueN\r\n
            \r\n
            </code>
            </remarks>
        </member>
        <member name="M:System.Net.WebHeaderCollection.ToByteArray">
            <summary>
            Generates a byte array representation of the headers, that is ready
            to be sent.
            </summary>
            <returns>An array of bytes.</returns>
            <remarks>
            This method serializes the headers into a byte array that can be
            sent over the network.  The format looks like:
            <code>
            Header-Name1: Header-Value1\r\n
            Header-Name2: Header-Value2\r\n
            ...
            Header-NameN: Header-ValueN\r\n
            \r\n
            </code>
            </remarks>
        </member>
        <member name="M:System.Net.WebHeaderCollection.IsRestricted(System.String)">
            <summary>
            Tests whether the specified HTTP header can be set.
            </summary>
            <param name="headerName">Name for the header.</param>
            <returns></returns>
            <remarks>
            Throws an exception if the header name is blank, contains illegal
            characters, or contains characters that are reserved by the HTTP
            protocol.
            </remarks>
        </member>
        <member name="M:System.Net.WebHeaderCollection.#ctor">
            <summary>
            Creates an empty collection of WEB headers.
            </summary>
        </member>
        <member name="M:System.Net.WebHeaderCollection.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Private constructor, called internally.
            </summary>
            <param name="internalCreate">Whether this is an HTTP headers
            object.</param>
        </member>
        <member name="M:System.Net.WebHeaderCollection.byteLength">
            <summary>
            Calculates the number of bytes needed to store the headers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.Net.WebHeaderCollection.Item(System.String)">
            <summary>
            Returns the string value for the header.
            </summary>
            <param name="header">The name of the header.</param>
            <value>A string containing the value. If no value is present,
            returns <itemref>null</itemref>.</value>
        </member>
        <member name="P:System.Net.WebHeaderCollection.Count">
            <summary>
            Gets the number of headers in the collection.
            </summary>
            <value>An <b>Int32</b> indicating the number of headers in a
            request.</value>
        </member>
        <member name="P:System.Net.WebHeaderCollection.AllKeys">
            <summary>
            Gets all header names (keys) in the collection.
            </summary>
            <value>An array of type <b>String</b> containing all header names in
            a Web request.</value>
        </member>
        <member name="M:System.Net.WebHeaderCollection.copyTo(System.Byte[],System.Int32)">
            <summary>
            Copies the headers into the byte array starting at bytes[offset].
            If the byte array is too small to hold the data, an
            ArgumentException is thrown.
            </summary>
            <param name="bytes">The array to copy.</param>
            <param name="offset">The offset to the beginning of the data to be
            copied into the WEB Headers collection.</param>
            <returns>How many bytes were copied.</returns>
        </member>
        <member name="T:System.Net.WebResponse">
            <summary>
            Provides a response from a Uniform Resource Identifier (URI).  This is
            an abstract class.
            </summary>
            <remarks>
            This is the abstract base class for all <itemref>WebResponse</itemref>
            objects.
            </remarks>
        </member>
        <member name="M:System.Net.WebResponse.#ctor">
            <summary>
            Initializes a new instance of the <itemref>WebResponse</itemref>
            class.
            </summary>
        </member>
        <member name="P:System.Net.WebResponse.ContentLength">
            <summary>
            When overridden in a descendant class, gets or sets the content
            length of data being received.
            </summary>
            <value>The number of bytes returned from the Internet
            resource.</value>
        </member>
        <member name="P:System.Net.WebResponse.ContentType">
            <summary>
            When overridden in a derived class, gets or sets the content type of
            the data being received.
            </summary>
            <value>A string that contains the content type of the
            response.</value>
        </member>
        <member name="M:System.Net.WebResponse.GetResponseStream">
            <summary>
            When overridden in a descendant class, returns the data stream from
            the Internet resource.
            </summary>
            <returns>An instance of the <see cref="T:System.IO.Stream"/> class for
            reading data from the Internet resource.</returns>
        </member>
        <member name="P:System.Net.WebResponse.ResponseUri">
            <summary>
            When overridden in a derived class, gets the URI of the Internet
            resource that actually responded to the request.
            </summary>
            <value>An instance of the <see cref="T:System.Uri"/> class that
            contains the URI of the Internet resource that actually responded to
            the request.</value>
            <remarks>
            This property gets the final Response URI, that includes any changes
            that may have transpired from the orginal request.
            </remarks>
        </member>
        <member name="P:System.Net.WebResponse.Headers">
            <summary>
            When overridden in a derived class, gets a collection of header
            name-value pairs associated with this request.
            </summary>
            <returns>An instance of the
            <see cref="T:System.Net.WebHeaderCollection"/> class that contains
            header values associated with this response.</returns>
        </member>
        <member name="M:System.Net.WebResponse.Close">
            <summary>
            When overridden by a descendant class, closes the response stream.
            </summary>
        </member>
        <member name="T:System.Net.WebExceptionStatus">
            <summary>
            Defines status codes for the <see cref="T:System.Net.WebException"/>
            class.
            </summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.Success">
            <summary>No error was encountered.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.NameResolutionFailure">
            <summary>The name resolver service could not resolve the host name.
            </summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.ConnectFailure">
            <summary>The remote service point could not be contacted at the
            transport level.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.ReceiveFailure">
            <summary>A complete response was not received from the remote
            server.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.SendFailure">
            <summary>A complete request could not be sent to the remote
            server.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.PipelineFailure">
            <summary>The request was a piplined request and the connection was
            closed before the response was received.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.RequestCanceled">
            <summary>The request was canceled or an unclassifiable error
            occurred.  This is the default value for
            <see cref="P:System.Net.WebException.Status"/>.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.ProtocolError">
            <summary>The response received from the server was complete but
            indicated a protocol-level error.  For example, an HTTP protocol
            error such as 401 Access Denied would use this status.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.ConnectionClosed">
            <summary>The connection was prematurely closed.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.TrustFailure">
            <summary>A server certificate could not be validated.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.SecureChannelFailure">
            <summary>An error occurred while establishing a connection using
            SSL.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.ServerProtocolViolation">
            <summary>The server response was not a valid HTTP
            response.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.KeepAliveFailure">
            <summary>The connection for a request that specifies the Keep-alive
            header was closed unexpectedly.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.Pending">
            <summary>An internal asynchronous request is pending.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.Timeout">
            <summary>No response was received during the time-out period for a
            request.</summary>
        </member>
        <member name="F:System.Net.WebExceptionStatus.ProxyNameResolutionFailure">
            <summary>The name resolver service could not resolve the proxy host
            name.</summary>
        </member>
        <member name="T:System.Net.HeaderInfo">
            <summary>
            Internal supporting class for validation of HTTP Web Headers.
            </summary>
        </member>
        <member name="F:System.Net.HeaderInfo.HeaderName">
            <summary>
            Note that the HeaderName field is not always valid, and should not
            be used after initialization. In particular, the HeaderInfo returned
            for an unknown header will not have the correct header name.
            </summary>
        </member>
        <member name="T:System.Net.HeaderInfoTable">
            <summary>
            Internal class with utilities to validate HTTP headers.
            </summary>
        </member>
        <member name="M:System.Net.HeaderInfoTable.ParseMultiValue(System.String)">
            <summary>
            Parses single HTTP header and separates values delimited by comma.
            Like "Content-Type: text, HTML". The value string "text, HTML" will se parsed into 2 strings.
            </summary>
            <param name="value">Value string with possible multivalue</param>
            <returns>Array of strings with single value in each. </returns>
        </member>
        <member name="F:System.Net.HeaderInfoTable.UnknownHeaderInfo">
            <summary>
            Header info for non-standard headers.
            </summary>
        </member>
        <member name="M:System.Net.HeaderInfoTable.Initialize">
            <summary>
            Initialize table with infomation for HTTP WEB headers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.Net.HeaderInfoTable.Item(System.String)">
            <summary>
            Return HTTP header information from specified name of HTTP header.
            </summary>
            <param name="name">Name for HTTP header </param>
            <returns>HTTP header information</returns>
        </member>
        <member name="T:System.Net.HttpDateParse">
            <summary>
            Internal class that parses the string with date in HTTP headers to DateTime object.
            </summary>
        </member>
        <member name="F:System.Net.HttpDateParse.BASE_DEC">
            <summary>
            Bse for decimal numbers
            </summary>
        </member>
        <member name="F:System.Net.HttpDateParse.DATE_INDEX_DAY_OF_WEEK">
            <summary>
            Date indicies used to figure out what each entry is.
            </summary>
        </member>
        <member name="M:System.Net.HttpDateParse.MapDayMonthToDword(System.Char[],System.Int32)">
            <summary>
            Looks at the first three bytes of string to determine if we're looking
            at a Day of the Week, or Month, or "GMT" string.  Is inlined so that
            the compiler can optimize this code into the caller FInternalParseHttpDate.
            </summary>
            <param name="lpszDay">Array of characters respresenting of the string in question.</param>
            <param name="index">Staring index to for the time date in the string</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.HttpDateParse.ParseHttpDate(System.String,System.DateTime@)">
             <summary>
             Parses through a ANSI, RFC850, or RFC1123 date format and covents it into
              a FILETIME/SYSTEMTIME time format.
            
             Important this a time-critical function and should only be changed
              with the intention of optimizing or a critical need work item.
             </summary>
             <param name="DateString">
              String with the date time information
             </param>
             <param name="dtOut">Out DateTime object. Used to return Systime if needed.</param>
             <returns>Success - TRUE,  Failure - FALSE</returns>
        </member>
        <member name="T:System.Net.InputNetworkStreamWrapper">
            <summary>
            The InputNetworkStreamWrapper is used to re-implement calls to  NetworkStream.Read
            It has internal buffer and during initial read operation it places available data from socket into buffer.
            Later it releases data to Stream.Read calls.
            It also provides direct access to bufferet data for internal code. 
            It provides possibility to "unread" or probe data - meaning user can read byte of data and then return it back to stream.
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_Stream">
            <summary>
            Actual network or SSL stream connected to the server.
            It could be SSL stream, so NetworkStream is not exact type, m_Stream would be derived from NetworkStream
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_lastUsed">
            <summary>
            Last time this stream was used ( used to timeout idle connections ).
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_Socket">
            <summary>
            This is a socket connected to client. 
            InputNetworkStreamWrapper owns the socket, not NetworkStream.
            If connection is persistent, then the m_Socket is transferred to the list of 
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_OwnsSocket">
            <summary>
            Determines is the NetworkStream owns the socket
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_rmAddrAndPort">
            <summary>
            Address and port used for connection of the socket. It is in form of Address:Port ( like www.microsoft.com:80 )
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_InUse">
            <summary>
            Determines if the stream is currently in use or not.
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_lineBuf">
            <summary>
            Buffer for one line of HTTP header.
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.read_buffer_size">
            <summary>
            Internal buffer size for read caching
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_readBuffer">
            <summary>
            Internal buffer for read caching
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_dataEnd">
            <summary>
            End of valid data in internal buffer.
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_dataStart">
            <summary>
            Start of valid data in internal buffer.
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_EnableChunkedDecoding">
            <summary>
            Indicates that the stream has chunking encoding. 
            We remove chunk markers and stop reading after end of last chunk.
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_chunk">
            <summary>
            Chunk data that we are currently decoding.
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_isClone">
            <summary>
            Inidcates the stream wrapper object is a clone and they underlying stream should not be disposed
            </summary>
        </member>
        <member name="F:System.Net.InputNetworkStreamWrapper.m_BytesLeftInResponse">
            <summary>
            Http web responses can contain the Content-Length of the response.  In these cases, we would like the stream to return an EOF indication
            if the caller tries to read past the content length. 
            </summary>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.RefillInternalBuffer">
            <summary>
            Refills internal buffer from network.
            </summary>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.ResetState">
            <summary>
            Resets position in internal buffers to zeroes.
            </summary>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.#ctor(System.Net.Sockets.NetworkStream,System.Net.Sockets.Socket,System.Boolean,System.String)">
            <summary>
            Passes socket parameter to the base.
            Base Network stream never owns the stream. 
            Socket is directly closed by class that contains InputNetworkStreamWrapper or transferred to
            list of idle sockets.
            </summary>
            <param name="stream">TBD</param>
            <param name="socket">TBD</param>
            <param name="ownsSocket">TBD</param>
            <param name="rmAddrAndPort">TBD</param>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Re-implements reading of data to network stream.
            </summary>
            <param name="buffer">Buffer with data to write to HTTP client</param>
            <param name="offset">Offset at which to use data from buffer</param>
            <param name="size">Count of bytes to write.</param>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.FlushReadBuffer">
            <summary>
            Clears the read buffer and reads from the underlying stream until no more data is available.
            </summary>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.ReleaseStream">
            
             Flushes the read buffer and resets the streams parameters.  When in used in conjunction with the HttpWebRequest class
             this method enables this stream to be re-used.
            
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.ReadInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Re-implements reading of data to network stream.
            </summary>
            <param name="buffer">Buffer with data to write to HTTP client</param>
            <param name="offset">Offset at which to use data from buffer</param>
            <param name="size">Count of bytes to write.</param>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Impletments Write for the stream. 
            Since we do not have write buffering, all we do is delegate to the m_Stream. 
            </summary>
            <param name="buffer">Buffer to write</param>
            <param name="offset">Start offset to write data</param>
            <param name="count">Count of bytes to write</param>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.Flush">
            <summary>
            Since we do not have write buffering, all we do is delegate to the m_Stream.
            </summary>
        </member>
        <member name="P:System.Net.InputNetworkStreamWrapper.CanRead">
            <summary>
            Return true if stream support reading.
            </summary>
        </member>
        <member name="P:System.Net.InputNetworkStreamWrapper.CanSeek">
            <summary>
            Return true if stream supports seeking
            </summary>
        </member>
        <member name="P:System.Net.InputNetworkStreamWrapper.CanTimeout">
            <summary>
            Return true if timeout is applicable to the stream
            </summary>
        </member>
        <member name="P:System.Net.InputNetworkStreamWrapper.CanWrite">
            <summary>
            Return true if stream support writing.
            </summary>
        </member>
        <member name="P:System.Net.InputNetworkStreamWrapper.Length">
            <summary>
            Gets the length of the data available on the stream.
            </summary>
            <returns>The length of the data available on the stream. 
            Add data cached in the stream buffer to available on socket</returns>
        </member>
        <member name="P:System.Net.InputNetworkStreamWrapper.Position">
            <summary>
            Position is not supported for NetworkStream
            </summary>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seekking is not suported on network streams
            </summary>
            <param name="offset">Offset to seek</param>
            <param name="origin">Relative origin of the seek</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.SetLength(System.Int64)">
            <summary>
            Setting of length is not supported
            </summary>
            <param name="value">Length to set</param>
        </member>
        <member name="P:System.Net.InputNetworkStreamWrapper.ReadTimeout">
            <summary>
            Timeout for read operations. 
            </summary>
        </member>
        <member name="P:System.Net.InputNetworkStreamWrapper.WriteTimeout">
            <summary>
            Timeout for write operations.
            </summary>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.Dispose(System.Boolean)">
            <summary>
            Overrides the Dispose Behavior
            </summary>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.Read_HTTP_Line(System.Int32)">
            <summary>
            Reads one line from steam, terminated by \r\n or by \n.
            </summary>
            <param name="maxLineLength">Maxinun length of the line. If line is longer than maxLineLength exception is thrown</param>
            <returns>String that represents the line, not including \r\n or by \n</returns>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.PeekByte">
            <summary>
            Preview the byte in the input stream without removing it.
            </summary>
            <returns>Next byte in the stream.</returns>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.ReadByte">
            <summary>
            Returns the byte in the input stream and removes it.
            </summary>
            <returns>Next byte in the stream.</returns>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes single byte to stream
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.Read_HTTP_Header(System.Int32)">
            <summary>
            Reads HTTP header from input stream.
            HTTP header can be wrapped on multiple lines.
            If next line starts by white space or tab - means it is continuing current header.
            Thus we need to use PeekByte() to check next byte without removing it from stream.
            </summary>
            <param name="maxLineLength">Maximum length of the header</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.InputNetworkStreamWrapper.GetChunk">
            <summary>
            Retrieve information of the chunk. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Net.OutputNetworkStreamWrapper">
            <summary>
            The OutputNetworkStreamWrapper is used to re-implement calls to  NetworkStream.Write
            On first write HttpListenerResponse needs to send HTTP headers to client.
            </summary>
        </member>
        <member name="F:System.Net.OutputNetworkStreamWrapper.m_Socket">
            <summary>
            This is a socket connected to client.
            OutputNetworkStreamWrapper owns the socket, not NetworkStream.
            If connection is persistent, then the m_Socket is transferred to the list of
            </summary>
        </member>
        <member name="F:System.Net.OutputNetworkStreamWrapper.m_Stream">
            <summary>
            Actual network or SSL stream connected to the client.
            It could be SSL stream, so NetworkStream is not exact type, m_Stream would be derived from NetworkStream
            </summary>
        </member>
        <member name="T:System.Net.OutputNetworkStreamWrapper.SendHeadersDelegate">
            <summary>
            Type definition of delegate for sending of HTTP headers.
            </summary>
        </member>
        <member name="F:System.Net.OutputNetworkStreamWrapper.m_headersSend">
            <summary>
            If not null - indicates whether we have sent headers or not.
            Calling of delegete sends HTTP headers to client - HttpListenerResponse.SendHeaders()
            </summary>
        </member>
        <member name="M:System.Net.OutputNetworkStreamWrapper.#ctor(System.Net.Sockets.Socket,System.Net.Sockets.NetworkStream)">
            <summary>
            Just passes parameters to the base.
            Socket is not owned by base NetworkStream
            </summary>
            <param name="socket"></param>
            <param name="stream"></param>
        </member>
        <member name="P:System.Net.OutputNetworkStreamWrapper.HeadersDelegate">
            <summary>
            Sets the delegate for sending of headers.
            </summary>
        </member>
        <member name="P:System.Net.OutputNetworkStreamWrapper.CanRead">
            <summary>
            Return true if stream support reading.
            </summary>
        </member>
        <member name="P:System.Net.OutputNetworkStreamWrapper.CanSeek">
            <summary>
            Return true if stream supports seeking
            </summary>
        </member>
        <member name="P:System.Net.OutputNetworkStreamWrapper.CanTimeout">
            <summary>
            Return true if timeout is applicable to the stream
            </summary>
        </member>
        <member name="P:System.Net.OutputNetworkStreamWrapper.CanWrite">
            <summary>
            Return true if stream support writing. It should be true, as this is output stream.
            </summary>
        </member>
        <member name="P:System.Net.OutputNetworkStreamWrapper.Length">
            <summary>
            Gets the length of the data available on the stream.
            Since this is output stream reading is not allowed and length does not have meaning.
            </summary>
            <returns>The length of the data available on the stream.</returns>
        </member>
        <member name="P:System.Net.OutputNetworkStreamWrapper.Position">
            <summary>
            Position is not supported for NetworkStream
            </summary>
        </member>
        <member name="P:System.Net.OutputNetworkStreamWrapper.ReadTimeout">
            <summary>
            Timeout for read operations.
            </summary>
        </member>
        <member name="P:System.Net.OutputNetworkStreamWrapper.WriteTimeout">
            <summary>
            Timeout for write operations.
            </summary>
        </member>
        <member name="M:System.Net.OutputNetworkStreamWrapper.Close">
            <summary>
            Closes the stream. Verifies that HTTP response is sent before closing.
            </summary>
        </member>
        <member name="M:System.Net.OutputNetworkStreamWrapper.Flush">
            <summary>
            Flushes the stream. Verifies that HTTP response is sent before flushing.
            </summary>
        </member>
        <member name="M:System.Net.OutputNetworkStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This putput stream, so read is not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.OutputNetworkStreamWrapper.ReadByte">
            <summary>
            This putput stream, so read is not supported.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Net.OutputNetworkStreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not suported on network streams
            </summary>
            <param name="offset">Offset to seek</param>
            <param name="origin">Relative origin of the seek</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.OutputNetworkStreamWrapper.SetLength(System.Int64)">
            <summary>
            Setting length is not suported on network streams
            </summary>
            <param name="value">Length to set</param>
            <returns></returns>
        </member>
        <member name="M:System.Net.OutputNetworkStreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes single byte to the stream.
            </summary>
            <param name="value">Byte value to write.</param>
        </member>
        <member name="M:System.Net.OutputNetworkStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Re-implements writing of data to network stream.
            The only functionality - on first write it sends HTTP headers.
            Then calls base
            </summary>
            <param name="buffer">Buffer with data to write to HTTP client</param>
            <param name="offset">Offset at which to use data from buffer</param>
            <param name="size">Count of bytes to write.</param>
        </member>
        <member name="T:System.Net.ValidationHelper">
            <summary>
             Internal support class for Validation related stuff.
            </summary>
        </member>
        <member name="T:System.UriKind">
            <summary>
            Defines the kinds of <see cref="T:System.Uri"/>s for the
            <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)"/> method and several
            <see cref="T:System.Uri"/> methods.
            </summary>
        </member>
        <member name="F:System.UriKind.RelativeOrAbsolute">
            <summary>
            The kind of the Uri is indeterminate.
            </summary>
        </member>
        <member name="F:System.UriKind.Absolute">
            <summary>
            The Uri is an absolute Uri.
            </summary>
        </member>
        <member name="F:System.UriKind.Relative">
            <summary>
            The Uri is a relative Uri.
            </summary>
        </member>
        <member name="T:System.UriHostNameType">
            <summary>
            Defines host name types for the http and https protocols.
            method.
            </summary>
        </member>
        <member name="F:System.UriHostNameType.Unknown">
            <summary>
            The type of the host name is not supplied.
            </summary>
        </member>
        <member name="F:System.UriHostNameType.Basic">
            <summary>
            The host is set, but the type cannot be determined.
            </summary>
        </member>
        <member name="F:System.UriHostNameType.Dns">
            <summary>
            The host name is a domain name system (DNS) style host name.
            </summary>
        </member>
        <member name="F:System.UriHostNameType.IPv4">
            <summary>
            The host name is an Internet Protocol (IP) version 4 host address.
            </summary>
        </member>
        <member name="F:System.UriHostNameType.IPv6">
            <summary>
            The host name is an Internet Protocol (IP) version 6 host address.
            </summary>
        </member>
        <member name="T:System.Uri">
            <summary>
            Provides an object representation of a uniform resource identifier (URI)
            and easy access to the parts of the URI.
            </summary>
        </member>
        <member name="F:System.Uri.UriSchemeHttp">
            <summary>
            Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP). This field is read-only.
            </summary>
        </member>
        <member name="F:System.Uri.UriSchemeHttps">
            <summary>
            Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS). This field is read-only.
            </summary>
        </member>
        <member name="T:System.Uri.Flags">
            <summary>
            Defines flags kept in m_Flags variable.
            </summary>
        </member>
        <member name="F:System.Uri.Flags.LoopbackHost">
            <summary>
            Flag value for loopback host
            </summary>
        </member>
        <member name="F:System.Uri.HttpDefaultPort">
            <summary>
            Default port for http protocol - 80
            </summary>
        </member>
        <member name="F:System.Uri.HttpsDefaultPort">
            <summary>
            Default port for https protocol - 443
            </summary>
        </member>
        <member name="F:System.Uri.UnknownPort">
            <summary>
            Constant to indicate that port for this protocol is unknown
            </summary>
        </member>
        <member name="F:System.Uri.m_hostNameType">
            <summary>
            Type of the host.
            </summary>
        </member>
        <member name="F:System.Uri.m_port">
            <summary>
            Member variable that keeps port used by this uri.
            </summary>
        </member>
        <member name="F:System.Uri.m_Flags">
            <summary>
            Member variable that keeps internal flags/
            </summary>
        </member>
        <member name="F:System.Uri.m_AbsolutePath">
            <summary>
            Member varialbe that keeps absolute path.
            </summary>
        </member>
        <member name="F:System.Uri.m_OriginalUriString">
            <summary>
            Member varialbe that keeps original string passed to Uri constructor.
            </summary>
        </member>
        <member name="F:System.Uri.m_scheme">
            <summary>
            Member varialbe that keeps scheme of Uri.
            </summary>
        </member>
        <member name="F:System.Uri.m_host">
            <summary>
            Member varialbe that keeps host name ( http and https ).
            </summary>
        </member>
        <member name="F:System.Uri.m_isAbsoluteUri">
            <summary>
            Member varialbe that keeps boolean if Uri is absolute.
            </summary>
        </member>
        <member name="F:System.Uri.m_isUnc">
            <summary>
            Member varialbe that tells if path is UNC ( Universal Naming Convention )
            In this class it is always false, but can be changed in derived classes.
            </summary>
        </member>
        <member name="F:System.Uri.m_absoluteUri">
            <summary>
            Member variable that keeps absolute uri (generated in method ParseUriString)
            </summary>
        </member>
        <member name="M:System.Uri.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Uri"/> class
            with the specified URI.
            </summary>
            <remarks>
            This constructor parses the URI string, therefore it can be used to
            validate a URI.
            </remarks>
            <param name="uriString">A URI.</param>
            <exception cref="T:System.Exception">
            The <paramref name="uriString"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <p>The <paramref name="uriString"/> is empty.</p>
            <p>-or-</p><p>The scheme specified in <paramref name="uriString"/>
            is not correctly formed.  </p>
            <p>-or-</p><p><paramref name="uriString"/> contains too many
            slashes.</p>
            <p>-or-</p><p>The password specified in <paramref name="uriString"/>
            is not valid.</p>
            <p>-or-</p><p>The host name specified in
            <paramref name="uriString"/> is not valid.</p>
            <p>-or-</p><p>The file name specified in
            <paramref name="uriString"/> is not valid.</p>
            <p>-or-</p><p>The user name specified in
            <paramref name="uriString"/> is not valid.</p>
            <p>-or-</p><p>The host or authority name specified in
            <paramref name="uriString"/> cannot be terminated by backslashes.
            </p>
            <p>-or-</p><p>The port number specified in
            <paramref name="uriString"/> is not valid or cannot be parsed.</p>
            <p>-or-</p><p>The length of <paramref name="uriString"/> exceeds
            65534 characters.</p>
            <p>-or-</p><p>The length of the scheme specified in
            <paramref name="uriString"/> exceeds 1023 characters.</p>
            <p>-or-</p><p>There is an invalid character sequence in
            <paramref name="uriString"/>.</p>
            <p>-or-</p><p>The MS-DOS path specified in
            <paramref name="uriString"/> must start with c:\\.</p>
            </exception>
        </member>
        <member name="M:System.Uri.ConstructAbsoluteUri(System.String)">
            <summary>
            Constructs an absolute Uri from a URI string.
            </summary>
            <param name="uriString">A URI.</param>
            <remarks>
            See <see cref="M:System.Uri.#ctor(System.String)"/>.
            </remarks>
        </member>
        <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
            <summary>
            Constructs Uri from string and enumeration that tell what is the type of Uri.
            </summary>
            <param name="uriString">String to construct Uri from</param>
            <param name="kind">Type of Uri to construct</param>
        </member>
        <member name="M:System.Uri.ValidateUriPart(System.String,System.Int32)">
            <summary>
            Validates that part of Uri after sheme is valid for unknown Uri scheme
            </summary>
            <param name="uriString">Uri string </param>
            <param name="startIndex">Index in the string where Uri part ( after scheme ) starts</param>
        </member>
        <member name="M:System.Uri.ParseUriString(System.String)">
            <summary>
            Internal method parses a URI string into Uri variables
            </summary>
            <param name="uriString">A Uri.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="uriString"/> is null.
            </exception>
            <exception cref="T:System.Exception">
            See constructor description.
            </exception>
        </member>
        <member name="M:System.Uri.ParseSchemeSpecificPart(System.String,System.Int32)">
            <summary>
            Parse Scheme-specific part of uri for host, port and absolute path
            Briefed syntax abstracted from .NET FX:
            Group 1 - http, https, ftp, file, gopher, nntp, telnet, ldap, net.tcp and net.pipe
                Must be rooted. The 1st segment is authority. Empty path should be replace as '/'
                
            Group 2 - file
                Reminder: Treat all '\' as '/'
                If it starts with only one '/', host should be empty
                Otherwise, all leading '/' should be ignored before searching for 1st segment. The 1st segment is host
            
            Group 3 - news and uuid
                Authority always be empty. Everything goes to path.
                
            Group 4 - mailto and all other shemes
                The 1st segment is authority iff it was not rooted.
                    
            Group 5 - all other schemes
                The 1st segment is authority iff it was rooted. Empty path should be replace as '/'
            </summary>
            <param name="sUri">Scheme-specific part of uri</param>
            <param name="iStart"></param>
        </member>
        <member name="M:System.Uri.IsIPv4(System.String)">
            <summary>
            Returns if host name is IP adress 4 bytes. Like 192.1.1.1
            </summary>
            <param name="host">string with host name</param>
            <returns>True if name is string with IPv4 address</returns>
        </member>
        <member name="M:System.Uri.ValidateUrn(System.String)">
            <summary>
            Parses urn string into Uri variables.
            Parsing is restricted to basic urn:NamespaceID, urn:uuid formats only.
            </summary>
            <param name="uri">A Uri.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="uri"/> is null.
            </exception>
            <exception cref="T:System.Exception">
            See the constructor description.
            </exception>
        </member>
        <member name="M:System.Uri.ValidateRelativePath(System.String)">
            <summary>
            Parses relative Uri into variables.
            </summary>
            <param name="uri">A Uri.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="uri"/> is null.
            </exception>
            <exception cref="T:System.Exception">
            See constructor description.
            </exception>
        </member>
        <member name="M:System.Uri.IsAlpha(System.Char)">
            <summary>
            Checks to see if the character value is an alpha character.
            </summary>
            <param name="testChar">The character to evaluate.</param>
            <returns><itemref>true</itemref> if the character is Alpha;
            otherwise, <itemref>false</itemref>.</returns>
        </member>
        <member name="M:System.Uri.IsAlphaNumeric(System.Char)">
            <summary>
            Checks to see if the character value is an alpha or numeric.
            </summary>
            <param name="testChar">The character to evaluate.</param>
            <returns><itemref>true</itemref> if the character is Alpha or
            numeric; otherwise, <itemref>false</itemref>.</returns>
        </member>
        <member name="M:System.Uri.IsHex(System.Char)">
            <summary>
            Checks to see if the character value is Hex.
            </summary>
            <param name="testChar">The character to evaluate.</param>
            <returns><itemref>true</itemref> if the character is a valid Hex
            character; otherwise, <itemref>false</itemref>.</returns>
        </member>
        <member name="P:System.Uri.HostNameType">
            <summary>
            Gets the type of the host name specified in the URI.
            </summary>
            <value>A member of the <see cref="T:System.UriHostNameType"/>
            enumeration.</value>
        </member>
        <member name="P:System.Uri.Port">
            <summary>
            Gets the port number of this URI.
            </summary>
            <value>An <itemref>Int32</itemref> value containing the port number
            for this URI.</value>
            <exception cref="T:System.InvalidOperationException">
            This instance represents a relative URI, and this property is valid
            only for absolute URIs.
            </exception>
        </member>
        <member name="P:System.Uri.IsAbsoluteUri">
            <summary>
            Gets whether the <see cref="T:System.Uri"/> instance is absolute.
            </summary>
            <value><itemref>true</itemref> if the <itemref>Uri</itemref>
            instance is absolute; otherwise, <itemref>false</itemref>.</value>
        </member>
        <member name="P:System.Uri.IsUnc">
            <summary>
            Gets whether the specified <see cref="T:System.Uri"/> is a universal
            naming convention (UNC) path.
            </summary>
            <value><itemref>true</itemref> if the <see cref="T:System.Uri"/> is a
            UNC path; otherwise, <itemref>false</itemref>.</value>
            <exception cref="T:System.InvalidOperationException">
            This instance represents a relative URI, and this property is valid
            only for absolute URIs.
            </exception>
        </member>
        <member name="P:System.Uri.AbsolutePath">
            <summary>
            Gets a local operating-system representation of a file name.
            </summary>
            <value>A <itemref>String</itemref> containing the local
            operating-system representation of a file name.</value>
            <exception cref="T:System.InvalidOperationException">
            This instance represents a relative URI, and this property is valid
            only for absolute URIs.
            </exception>
        </member>
        <member name="P:System.Uri.OriginalString">
            <summary>
            Gets the original URI string that was passed to the Uri constructor.
            </summary>
        </member>
        <member name="P:System.Uri.AbsoluteUri">
            <summary>
            Gets a string containing the absolute uri or entire uri of this instance.
            </summary>
            <value>A <itemref>String</itemref> containing the entire URI.
            </value>
        </member>
        <member name="P:System.Uri.Scheme">
            <summary>
            Gets the scheme name for this URI.
            </summary>
            <value>A <itemref>String</itemref> containing the scheme for this
            URI, converted to lowercase.</value>
            <exception cref="T:System.InvalidOperationException">
            This instance represents a relative URI, and this property is valid only
            for absolute URIs.
            </exception>
        </member>
        <member name="P:System.Uri.Host">
            <summary>
            Gets the host component of this instance.
            </summary>
            <value>A <itemref>String</itemref> containing the host name.  This
            is usually the DNS host name or IP address of the server.</value>
        </member>
        <member name="P:System.Uri.IsLoopback">
            <summary>
            Gets whether the specified <see cref="T:System.Uri"/> refers to the
            local host.
            </summary>
            <value><itemref>true</itemref> if the host specified in the Uri is
            the local computer; otherwise, <itemref>false</itemref>.</value>
        </member>
        <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
            <summary>
            Indicates whether the string is well-formed by attempting to
            construct a URI with the string.
            </summary>
            <param name="uriString">A URI.</param>
            <param name="uriKind">The type of the URI in
            <paramref name="uriString"/>.</param>
            <returns>
            <itemref>true</itemref> if the string was well-formed in accordance
            with RFC 2396 and RFC 2732; otherwise <itemref>false</itemref>.
            </returns>
        </member>
        <member name="T:System.Web.HttpUtility">
            <summary>
            Utilities to encode and decode url
            </summary>
        </member>
        <member name="M:System.Web.HttpUtility.UrlEncode(System.String)">
            <summary>
            Encode an URL using UTF8
            </summary>
            <param name="str">The URL string to encode</param>
            <returns>The encoded string URL</returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Encode an URL
            </summary>
            <param name="str">The URL string to encode</param>
            <param name="e">The Encoding object that specifies the encoding scheme</param>
            <returns>The encoded string URL</returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlEncode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encode an URL
            </summary>
            <param name="bytes">The array of bytes to encode</param>
            <param name="offset">The position in the byte array at which to begin encoding</param>
            <param name="count">The number of bytes to encode</param>
            <returns>The encoded string URL</returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlEncode(System.Byte[])">
            <summary>
            Encode an URL
            </summary>
            <param name="bytes">The array of bytes to encode</param>
            <returns>The encoded string URLL</returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlEncodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Encode an URL into a byte array
            </summary>
            <param name="str">The URL string to encode</param>
            <param name="e"></param>
            <returns>The encoded byte array</returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlEncodeToBytes(System.Byte[])">
            <summary>
            Encode a byte array URL into a byte array
            </summary>
            <param name="bytes">The array of bytes to encode</param>
            <returns>The encoded byte array</returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encode a byte array URL into a byte array
            </summary>
            <param name="bytes">The array of bytes to encode</param>
            <param name="offset">The position in the byte array at which to begin encoding</param>
            <param name="count">The number of bytes to encode</param>
            <returns>The encoded byte array</returns>		
        </member>
        <member name="M:System.Web.HttpUtility.UrlDecode(System.String)">
            <summary>
            Decode an UTF8 encoded URL
            </summary>
            <param name="url">The encoded URL</param>
            <returns>The decoded URL</returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Decode an URL using the specified encoding
            </summary>
            <param name="str">The string to encode</param>
            <param name="e">The Encoding object that specifies the encoding scheme</param>
            <returns>The encoded string</returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlDecode(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Decode an encoded URL
            </summary>
            <param name="bytes">The array of bytes to decode</param>
            <param name="offset">The position in the byte to begin decoding</param>
            <param name="count">The number of bytes to decode</param>
            <param name="e">The Encoding object that specifies the encoding scheme</param>
            <returns>The decoded URL</returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlDecode(System.Byte[],System.Text.Encoding)">
            <summary>
            Decode an encoded URL
            </summary>
            <param name="bytes">The array of bytes to decode</param>
            <param name="e">The Encoding object that specifies the encoding scheme</param>
            <returns>The decoded URL</returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decode bytes array to byte array
            </summary>
            <param name="bytes">The array of bytes to decode</param>
            <param name="offset">The position in the byte array at which to begin decoding</param>
            <param name="count">The number of bytes to decode</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlDecodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Decode bytes array to byte array
            </summary>
            <param name="str">The string to encode</param>
            <param name="e">The Encoding object that specifies the encoding scheme</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlDecodeToBytes(System.String)">
            <summary>
            Decode bytes array to byte array in UTF8
            </summary>
            <param name="str">The string to encode</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.HttpUtility.UrlDecodeToBytes(System.Byte[])">
            <summary>
            Decode bytes array to byte array
            </summary>
            <param name="bytes">The array of bytes to decode</param>
            <returns></returns>
        </member>
        <member name="M:System.Web.HttpUtility.HexToInt(System.Char)">
            <summary>
            Get the int value of a char
            </summary>
            <param name="h">a char</param>
            <returns>The int value of the char</returns>
        </member>
    </members>
</doc>
